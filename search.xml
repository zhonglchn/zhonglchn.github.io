<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分查找法入门</title>
      <link href="/2020/01/05/%E4%BA%8C%E5%88%86%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/05/%E4%BA%8C%E5%88%86%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">代码演示：</span><br><span class="line"></span><br><span class="line"><span class="comment">/** versions=1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhonglchn</span></span><br><span class="line"><span class="comment"> * 个人案例： 计算机在指定范围内猜用户输入的数字，设计一个程序，不管用户输的什么数字，计算机最多只需要查找的次数。</span></span><br><span class="line"><span class="comment"> * 二分查找法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找的范围</span></span><br><span class="line">        <span class="keyword">int</span> notArr = <span class="number">18</span>;</span><br><span class="line">        <span class="comment">// number为需要猜测的数字</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// guess为你猜的数字，根据二分查找法</span></span><br><span class="line">        <span class="keyword">int</span> guess = notArr/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 初始化查找的次数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一次查找的最大范围</span></span><br><span class="line">        <span class="keyword">int</span> max = notArr;</span><br><span class="line">        <span class="comment">// 第一次查找的最小范围</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (guess != number) &#123;</span><br><span class="line">            <span class="comment">// 进来就代表查找了一次。</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (guess &gt; number) &#123;</span><br><span class="line">                <span class="comment">// 上面定义了guess初始化为第一次，故做以下判断</span></span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">1</span>) &#123; max=max/<span class="number">2</span>; &#125;</span><br><span class="line">                guess = (max + min) / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(guess &gt; number)&#123;</span><br><span class="line">                        max = guess;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        min = guess;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">               guess = (guess + max)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(guess &gt; number)&#123;</span><br><span class="line">                       max = guess;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        min = guess;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为在循环外面就猜了一次，故需要+1；</span></span><br><span class="line">        System.out.println(count+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 - 入门案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以前我有个朋友</title>
      <link href="/2020/01/04/aTa01/"/>
      <url>/2020/01/04/aTa01/</url>
      
        <content type="html"><![CDATA[<p>​    阿T啊：</p><p>​        我是个想要拼命抓住感情的人，不管是爱情还是友情。</p><p>我在亲情中没有得到足够的爱，在高中时期把一切的感情都压在了友情身上，用现在的话来说，我在友情里面是个卑微的舔狗。我一直认为只要用心对待，只要你拿出一颗心放在他们面前，他们迟早会拥抱你，毕竟我先跨出了那一步。</p><p>​        但是我忘记了不是人人都能体会到你的好，不是每个人都能看到你的，也不是每个人在你掏出心肺时张开双手是为了拥抱，还有的是为了夺取你的心跟他人炫耀。</p><p>​        L是我高一同学，高一我和她都在全校最好的班垫底，她热情开放，有很多朋友，不管是男生还是女生都很喜欢她。和她成为朋友是很偶然的机会，两个人座位分到一起，上课都不认真听课，于是走到一起，后来高二分班分开，我在二楼，她在三楼，我害怕她忘记我，只要有时间都会去找她，带着问候和零食。她没有下来看过我，我没有在乎，觉得她大概就是不喜欢联系的一个人。我告诉她，没钱了可以找我，在能力范围之类我会帮他解决。后来学业渐渐繁重，我不再去找她，她也没来找过我。高三分班后，我跟她初中一个好友在同一个班，我于是常常能见到她，虽然每次来她都只是找另一个女孩子，我还是觉得很开心。后来有一天，她在窗外很热情的跟我打招呼，我开心极了，她找我借钱，我很爽快的借给了她。很久之后的一天，我坐在了她初中朋友的前面，她从我身边走过，像是没有看见我，跟她朋友聊得热火朝天。我可能那一次真的知道什么叫，看过了她对别人的好，你才知道她是真的不在乎你。</p><p>​        我朋友跟我说，早就应该放弃，是你没有看透。</p><p>我一直是一个不撞南墙不回头的人，沉浸在自己的幻想中无法自拔，看不清前方的方向，也固执地不肯前进。两年后的某一天，她翻到了我给她写的信看到我的真心，她给我发消息说对不起，对不起错过这样的我。彼时的我早已穿起坚硬的铠甲，找到自己，我无法回应她迟钝的反应，就像我也不知道我该给自己一个什么交代一样，我只能够跟她说，没关系，我从未怪过她。</p><p>​        我怪的只有自己。</p><p>​        以前的朋友，不管对的错的，都能看见时光在身上流淌的痕迹，辜负和在意在多年后都成为青春的一道剪影，我从未怪过她，我把自己感动的一塌糊涂的日子，我奋不顾身的日子，我撞南墙不愿回头的日子，都是静静地能够看见的青春呀。</p><p>​        以前我有个朋友，他教会我很多事情，离开我的生活，奔赴了更加美好的人生。</p>]]></content>
      
      
      <categories>
          
          <category> 文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿T啊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/01/01/Git/"/>
      <url>/2020/01/01/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><p>目标1: 了解git 历史 </p><p>目标2: 了解git 与 svn 的区别 </p><p><strong>目标3: 掌握git 的工作流程</strong> </p><p>目标4: 熟悉git 安装使用 </p><p><strong>目标5: 掌握git 管理文件版本</strong> </p><p><strong>目标6: 掌握使用远程仓库</strong> </p><p><strong>目标7: 掌握分支管理</strong> </p><p><strong>目标8: 掌握IDEA 操作 Git</strong> </p><h2 id="第一部分：Git的简介与安装"><a href="#第一部分：Git的简介与安装" class="headerlink" title="第一部分：Git的简介与安装"></a>第一部分：Git的简介与安装</h2><h3 id="01、版本控制是什么？"><a href="#01、版本控制是什么？" class="headerlink" title="01、版本控制是什么？"></a>01、版本控制是什么？</h3><blockquote><p><strong>目标：</strong>掌握和了解Git是什么，在实际应用中处于什么角色。</p></blockquote><p><strong>需求</strong></p><p>在项目开发中，团队协作管理代码和文件是每天必须要做的事情。大家一定会碰到如下几个场景和问题？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>：协同修改，多人并行开发修改服务器的文件</span><br><span class="line"><span class="number">2</span>：数据备份</span><br><span class="line"><span class="number">3</span>：版本管理，权限控制</span><br><span class="line"><span class="number">4</span>：如果文件和工程误删了还能找回来吗？</span><br><span class="line"><span class="number">5</span>：分支管理 <span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>：遇到了文件冲突如何解决？</span><br><span class="line"><span class="number">7</span>：如何把一些我临时保存的文件不要提交?</span><br></pre></td></tr></table></figure><p>Svn版本控制软件: </p><p>Git版本控制器软件: </p><p><strong>小结</strong></p><ul><li>svn和git都是做版本控制的，如果不理解一句话: <strong>记录代码的轨迹</strong>就好比每个人的成长阶段一样。</li></ul><h3 id="02、Git的由来和发展史"><a href="#02、Git的由来和发展史" class="headerlink" title="02、Git的由来和发展史"></a>02、Git的由来和发展史</h3><blockquote><p><strong>目标</strong>：学习和掌握git的发展史及特点</p></blockquote><p><strong>概述</strong></p><p>同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002 年间）。到 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，于是整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。 </p><p>到 2005 年的时候，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统订了若干目标： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• 速度快 </span><br><span class="line">• 简单的设计 </span><br><span class="line">• 对非线性开发模式的强力支持（允许上千个并行开发的分支） </span><br><span class="line">• 完全分布式 </span><br><span class="line">• 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h3 id="03、Git与Svn区别"><a href="#03、Git与Svn区别" class="headerlink" title="03、Git与Svn区别"></a>03、Git与Svn区别</h3><blockquote><p><strong>目标</strong>：Git与Svn区别</p></blockquote><h4 id="3-1-集中式版本控制（Svn）"><a href="#3-1-集中式版本控制（Svn）" class="headerlink" title="3.1 集中式版本控制（Svn）"></a>3.1 集中式版本控制（Svn）</h4><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。</p><p>下图就是标准的集中式版本控制工具管理方式:</p><p>集中管理方式在一定程度上看到其他开发人员在干什么，而管理员也可以很轻松掌握每个人的开发权限。</p><p>但是相较于其优点而言，集中式版本控制工具缺点很明显：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务器单点故障</span><br><span class="line">容错性差</span><br></pre></td></tr></table></figure><h4 id="3-2-分布式版本控制（Git）"><a href="#3-2-分布式版本控制（Git）" class="headerlink" title="3.2 分布式版本控制（Git）"></a>3.2 分布式版本控制（Git）</h4><p>Git是分布式版本控制系统，那么它可以没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>下图就是分布式版本控制工具管理方式：</p><p> <strong>小结</strong></p><ul><li>svn它集中式的版本控制，不能离线工作。git分布式的版本控制，它版本放在用户自己的电脑。</li><li>svn不支持离线工作，版本全部都放在是中央服务器。如果中央服务器挂了。那么版本全部丢失。</li><li>git支持离线工作。版本都放用户自己电脑上完成。—- 分布式的版本控制。</li><li>svn是项目对仓库，git是仓库对仓库。</li></ul><h3 id="04、GitHub和码云"><a href="#04、GitHub和码云" class="headerlink" title="04、GitHub和码云"></a>04、GitHub和码云</h3><blockquote><p><strong>目标：</strong>了解github与码云代码托管中心</p></blockquote><p>比较出名的代码托管中心: GitHub 和 码云</p><h4 id="4-1-什么是GitHub？"><a href="#4-1-什么是GitHub？" class="headerlink" title="4.1 什么是GitHub？"></a>4.1 什么是GitHub？</h4><p>确切的说 GitHub 是一家公司，位于旧金山，由 Chris Wanstrath, PJ Hyett 与 Tom Preston-Werner 三位开发者在2008年4月创办。这是它的 Logo：</p><p>2008年4月10日，GitHub正式成立，地址：How people build software · GitHub ，主要提供基于git的版本托管服务。一经上线，它的发展速度惊为天人，截止目前，GitHub 已经发展成全球最大的开源社区。所以 Git 只是 GitHub 上用来管理项目的一个工具而已，GitHub 的功能可远不止于此！</p><h4 id="4-2-什么是码云？"><a href="#4-2-什么是码云？" class="headerlink" title="4.2 什么是码云？"></a>4.2 什么是码云？</h4><p>我们使用GitHub的时候，会感觉比较慢，为什么？ 原因就是GitHub在遥远的美国，由于各种原因造成访问速度不怎么好，所以国内的git服务提供商，码云就起来了。</p><h4 id="4-3-产品功能对比"><a href="#4-3-产品功能对比" class="headerlink" title="4.3 产品功能对比"></a>4.3 产品功能对比</h4><table><thead><tr><th align="left">功能</th><th>码云 Gitee</th><th>GitHub</th></tr></thead><tbody><tr><td align="left">代码托管，支持 Git/SVN</td><td>√</td><td>√</td></tr><tr><td align="left">开源项目、代码片段</td><td>√</td><td>√</td></tr><tr><td align="left">Issue</td><td>√</td><td>√</td></tr><tr><td align="left">Wiki</td><td>√</td><td>√</td></tr><tr><td align="left">Fork + Pull Request</td><td>√</td><td>√</td></tr><tr><td align="left">组织</td><td>√</td><td>√</td></tr><tr><td align="left">私有仓库免费协作人数</td><td>5 人</td><td>3 人</td></tr><tr><td align="left">保护分支</td><td>免费</td><td>收费</td></tr><tr><td align="left">在线 IDE（Gitee IDE）</td><td>√</td><td>不支持</td></tr><tr><td align="left">仓库自动备份</td><td>√</td><td>不支持</td></tr><tr><td align="left">禁止 Git 强推</td><td>√</td><td>不支持</td></tr><tr><td align="left">支持仓库访问 IP 限制</td><td>√</td><td>不支持</td></tr><tr><td align="left">企业级研发协作</td><td>5 人免费</td><td>收费</td></tr><tr><td align="left">敏捷开发管理</td><td>√</td><td></td></tr><tr><td align="left">任务看板（可灵活定义）</td><td>√</td><td></td></tr><tr><td align="left">支持多级任务、关联任务</td><td>√</td><td></td></tr><tr><td align="left">自动代码质量分析</td><td>√</td><td></td></tr><tr><td align="left">快捷生成工作周报</td><td>√</td><td></td></tr><tr><td align="left">代码克隆检测</td><td>√</td><td></td></tr><tr><td align="left">自动生成 JavaDoc/PHPDoc</td><td>√</td><td></td></tr><tr><td align="left">多语言 README 自动渲染</td><td>√</td><td></td></tr><tr><td align="left">支持微信/钉钉通知</td><td>√</td><td></td></tr></tbody></table><h4 id="4-4-协作开发流程"><a href="#4-4-协作开发流程" class="headerlink" title="4.4 协作开发流程"></a>4.4 协作开发流程</h4><h3 id="05、Git安装：客户端和服务端"><a href="#05、Git安装：客户端和服务端" class="headerlink" title="05、Git安装：客户端和服务端"></a>05、Git安装：客户端和服务端</h3><p><strong>前提</strong></p><ul><li>现在已经明白Git是一款版本控制工具。和Svn一样分为客户端和服务端。</li><li>服务端用来创建仓库保存文件的版本信息。客户端用来控制服务端的文件的维护操作。</li></ul><h4 id="5-1-下载"><a href="#5-1-下载" class="headerlink" title="5.1 下载"></a>5.1 下载</h4><p><a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p><p><strong>安装教程：安装Git服务端</strong></p><blockquote><p>这是 windows 版本的 git 服务器；所以必须安装；安装说明详情见“资料”下的《Windows 系统安装 Git 2.14.1.docx》    </p></blockquote><h4 id="5-2-安装"><a href="#5-2-安装" class="headerlink" title="5.2 安装"></a>5.2 安装</h4><p>一路“Next”使用默认选项即可。</p><p>安装完成后，可以在任意文件夹点右键，看到如下菜单：</p><p>新建D:\test文件夹，在test上面，点击Git的控制台，在控制台输入git，可以看到相关的帮助信息：</p><h4 id="5-3-配置"><a href="#5-3-配置" class="headerlink" title="5.3 配置"></a>5.3 配置</h4><ul><li><p>配置签名: 用户名和邮箱(提交的用户名与邮箱)</p><ul><li><p>git config –global user.name “nameVal”</p></li><li><p>git config –global user.email “emailVal”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "lixiaohua"</span><br><span class="line">git config --global user.email "lixiaohua@itcast.cn"</span><br></pre></td></tr></table></figure><p>细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">局部的用户信息放在：当前项目的   .git&#x2F;config</span><br><span class="line">    全局的用户信息放在：系统盘的--用户目录--用户名目录-- .gitconfig文件中</span><br><span class="line">                  [C:\Users\Administrator\.gitconfig]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第二部分：Git命令入门到精通"><a href="#第二部分：Git命令入门到精通" class="headerlink" title="第二部分：Git命令入门到精通"></a>第二部分：Git命令入门到精通</h2><h3 id="06、Git命令：创建版本库"><a href="#06、Git命令：创建版本库" class="headerlink" title="06、Git命令：创建版本库"></a>06、Git命令：创建版本库</h3><blockquote><p><strong>目标：</strong>知道什么是版本库，并且创建它</p></blockquote><p>  什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。由于git是分布式版本管理工具，所以git在不需要联网的情况下也具有完整的版本管理能力。</p><p>创建一个版本库非常简单:</p><ul><li><p>首先，选择一个合适的地方，创建一个空目录。在D:\test目录下，创建了一个hello目录： <img src="assets/clip_image023.jpg" alt="img"></p></li><li><p>使用git init命令把这个目录变成Git可以管理的仓库：<img src="assets/clip_image025.jpg" alt="img"></p></li><li><p>命令输入后，你已经创建了一个空的Git仓库。此时你会在hello目录下发现一个隐藏目录.git <img src="assets/clip_image027.jpg" alt="img"></p><p>这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。</p><p>此处的hello目录就是我们的：<strong>工作区 (work tree)</strong>，存放所有当前文档。此目录下的文件才会被Git管理，hello中的.git目录就是我们的：<strong>本地仓库</strong>，管理并保存所有的文档变化及历史状态。</p></li></ul><p><strong>版本库核心文件的解释</strong></p><table><thead><tr><th align="center">目录</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">config</td><td align="left">该文件主要记录针对该项目的一些配置信息，例如是否以bare方式初始化、remote的信息等，通过git remote add命令增加的远程分支的信息就保存在这里；</td></tr><tr><td align="center">objects</td><td align="left">Git中的文件和一些操作都会以git对象来保存，git对象分为BLOB、tree和commit三种类型，例如git commit便是git中的commit对象，而各个版本之间是通过<strong>版本树</strong>来组织的，比如当前的HEAD会指向某个commit对象，而该commit对象又会指向几个BLOB对象或者tree对象。</td></tr><tr><td align="center">HEAD</td><td align="left">该文件指明了git branch（即当前分支）的结果，比如当前分支是master，则该文件就会指向master，但是并不是存储一个master字符串，而是分支在refs中的表示，例如ref: refs/heads/master</td></tr><tr><td align="center">index</td><td align="left">该文件保存了暂存区域的信息。该文件某种程度就是缓冲区（staging area），内容包括它指向的文件的时间戳、文件名、sha1值等；</td></tr><tr><td align="center">Refs</td><td align="left">该文件夹存储指向数据（分支）的提交对象的指针。</td></tr></tbody></table><p><strong>小结</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建版本库的步骤：</span><br><span class="line"><span class="number">1.</span> 进入需要管理的目录</span><br><span class="line"><span class="number">2.</span> 执行 git init 命令</span><br></pre></td></tr></table></figure><h3 id="07、Git命令：添加文件并提交"><a href="#07、Git命令：添加文件并提交" class="headerlink" title="07、Git命令：添加文件并提交"></a>07、Git命令：添加文件并提交</h3><blockquote><p><strong>目标：</strong>Git是如何在仓库中添加文件并提交到本地仓库?</p></blockquote><p>  版本控制系统，其目的就是跟踪文本文件的改动，例如我们开发时编写的.java、.properties本质都是文本文件。文件中每一个字符的变化都会被跟踪并且管理。</p><p><img src="assets/1552015317597.png" alt="1552015317597"></p><p><img src="assets/1551861304830.png" alt="1551861304830"></p><ul><li><p>我们在当前的hello目录下创建一个新的文本文件：readme.txt</p></li><li><p>编写一段文字：hello Git!</p></li><li><p>接下来，我们使用 git add 命令，将文件添加到暂存区<img src="assets/clip_image035.jpg" alt="img"></p><p>没有任何的反应，证明没有问题。</p></li><li><p>使用 git commit 命令，将暂存区文件提交到本地仓库<img src="assets/clip_image037.jpg" alt="img"></p></li></ul><p><strong>命令解释</strong>:</p><p>   git commit 命令可以将暂存区的文件提交到版本库。</p><p>   -m 参数，是本次提交的说明信息，用来注释本次提交做了些说明事情。</p><p>*<em>总结: *</em>将一个文件添加到本地仓库，分两步：</p><ul><li>使用 git add <file> 命令，添加文件。可以一次添加多个文件。</li><li>使用 git commit -m ‘’ 命令，提交，一次即可。</li></ul><p>可能大家会有疑问，为什么这里不是直接commit提交，而是要经过add和commit两个步骤呢？</p><p>这就关系到Git的版本库中的 工作区 暂存区概念了。</p><h3 id="08、Git概念：工作区、暂存区、版本库"><a href="#08、Git概念：工作区、暂存区、版本库" class="headerlink" title="08、Git概念：工作区、暂存区、版本库"></a>08、Git概念：工作区、暂存区、版本库</h3><blockquote><p><strong>目标：</strong>理解Git 工作区、暂存区和版本库概念</p></blockquote><p><strong>工作区：</strong></p><ul><li><p>工作区就是你在电脑里能看到的目录。比如我们刚刚创建的hello目录：</p><p>其中包含了一个隐藏目录 .git ，其它就是我们需要被管理的文件。</p></li></ul><p><strong>版本库及暂存区：</strong></p><ul><li>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li><li>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li></ul><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一步是用git <span class="keyword">add</span><span class="bash">把文件添加进去，实际上就是把文件修改添加到暂存区；</span></span><br><span class="line">第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</span><br></pre></td></tr></table></figure><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p><p><strong>小结：</strong>你可以简单理解为，需要提交的文件通通放到暂存区，然后，一次性提交暂存区到版本库。</p><h3 id="09、Git命令：文件的修改、状态、日志"><a href="#09、Git命令：文件的修改、状态、日志" class="headerlink" title="09、Git命令：文件的修改、状态、日志"></a>09、Git命令：文件的修改、状态、日志</h3><blockquote><p><strong>目标：</strong>掌握文件的修改以及修改的提交及状态日志的查看</p></blockquote><ul><li><p>被版本库管理的文件不可避免的要发生修改，此时只需要直接对文件修改即可。修改完毕后需要将文件的修改提交到版本库。</p></li><li><p>我们对readme.txt文件进行修改，添加一行数据：</p></li></ul><h4 id="9-1-比较差异"><a href="#9-1-比较差异" class="headerlink" title="9.1 比较差异"></a>9.1 比较差异</h4><p>用<code>git diff HEAD readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><p>可以发现，与版本库中的 readme.txt相比，我们多了一行文本！</p><h4 id="9-2-查看修改状态"><a href="#9-2-查看修改状态" class="headerlink" title="9.2 查看修改状态"></a>9.2 查看修改状态</h4><hr><p>我们如果不确定自己的哪些文件被修改了，可以使用git status命令，查看当前工作区的状态： <img src="assets/clip_image047.jpg" alt="img"> </p><p>可以清楚的看到：changes not staged for commit（修改没有被缓存，需要使用git add来进行添加操作）,我们使用git add 命令，添加到暂存区：</p><p><img src="assets/clip_image049.jpg" alt="img"> </p><p>再次查看状态：</p><p><img src="assets/clip_image051.jpg" alt="img"> </p><p>这次提示： changes to be commited （修改需要被提交），我们使用git commit 进行提交<img src="assets/clip_image053.jpg" alt="img"></p><p>再次查看状态：</p><p><img src="assets/clip_image055.jpg" alt="img"> </p><p>提</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/31/hello-world/"/>
      <url>/2019/12/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="17、分支管理：合并分支、切换分支"><a href="#17、分支管理：合并分支、切换分支" class="headerlink" title="17、分支管理：合并分支、切换分支"></a>17、分支管理：合并分支、切换分支</h3><p>  分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>文件提交的过程:</p><ul><li><p>第一步：创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch dev   创建分支 dev</span><br><span class="line">git checkout dev  选中当前分支  dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：上面两个命令可以组合成一个复合命令</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> git checkout -b dev  = （git branch dev +  git checkout dev）</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：查看分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>第三步：添加文件，提交文件在当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件，输入任意内容</span></span><br><span class="line">vim e.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交e.txt文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交e.txt文件到dev分支中</span></span><br><span class="line">git commit -m 'e.txt'</span><br></pre></td></tr></table></figure></li><li><p>第四步：推送分支到远程仓库中</p></li></ul><h2 id="第四部分：-java代码测试"><a href="#第四部分：-java代码测试" class="headerlink" title="第四部分： java代码测试"></a>第四部分： java代码测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">代码演示：</span><br><span class="line"></span><br><span class="line"><span class="comment">/** versions=1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhonglchn</span></span><br><span class="line"><span class="comment"> * 个人案例： 计算机在指定范围内猜用户输入的数字，设计一个程序，不管用户输的什么数字，计算机最多只需要查找的次数。</span></span><br><span class="line"><span class="comment"> * 二分查找法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找的范围</span></span><br><span class="line">        <span class="keyword">int</span> notArr = <span class="number">18</span>;</span><br><span class="line">        <span class="comment">// number为需要猜测的数字</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// guess为你猜的数字，根据二分查找法</span></span><br><span class="line">        <span class="keyword">int</span> guess = notArr/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 初始化查找的次数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一次查找的最大范围</span></span><br><span class="line">        <span class="keyword">int</span> max = notArr;</span><br><span class="line">        <span class="comment">// 第一次查找的最小范围</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (guess != number) &#123;</span><br><span class="line">            <span class="comment">// 进来就代表查找了一次。</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (guess &gt; number) &#123;</span><br><span class="line">                <span class="comment">// 上面定义了guess初始化为第一次，故做以下判断</span></span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">1</span>) &#123; max=max/<span class="number">2</span>; &#125;</span><br><span class="line">                guess = (max + min) / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(guess &gt; number)&#123;</span><br><span class="line">                        max = guess;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        min = guess;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">               guess = (guess + max)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(guess &gt; number)&#123;</span><br><span class="line">                       max = guess;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        min = guess;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为在循环外面就猜了一次，故需要+1；</span></span><br><span class="line">        System.out.println(count+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
